//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""SinglePlayer"",
            ""id"": ""e2cc7ada-a67d-4e5a-8208-9da3b93c0be9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""502e1cd7-0d19-44af-aa9a-6f867d8e8f37"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""8255e023-d49a-48e1-8173-657753b355df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""df42f1fa-3f5a-4735-b78d-34366b6202e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hint"",
                    ""type"": ""Button"",
                    ""id"": ""6be1eb58-a7e6-4426-b2de-3c33ce18e411"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""db82b7cb-58b1-4d97-bfd6-bb8dbb5c2663"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""6d66d2c6-4f75-4f28-aa42-d51f649c352a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ca7cd9c8-b52d-47fe-82e8-36e8e4aa060d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4c21ceca-eb4a-46ac-bc9e-feeaddf2bab6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7f3e7e3-b12f-4e83-a41e-6baea61df411"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a14a773b-b658-4afe-b5d8-4b43f2482bd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ae5cb2b-9056-4de6-a9ff-c123c26d2547"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08976b64-f7b7-4417-8e4a-3775897e928d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5219fd30-7e72-418b-81bb-9aa5a35ab6be"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b04ce000-7efa-4f00-b6a2-807647a93ffe"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41d0fe0c-3519-4d19-9040-a3f4dddb8f21"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53261fa2-fabc-462f-9e48-f9f27a7f7bb8"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""837b11b2-3d8b-4608-bf9f-92394b0ad02c"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""b62d4f3e-dc42-4a64-8655-e0ea7b45ba2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c3f3343-813b-4b6e-89a6-368a630fa959"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SinglePlayer
        m_SinglePlayer = asset.FindActionMap("SinglePlayer", throwIfNotFound: true);
        m_SinglePlayer_Move = m_SinglePlayer.FindAction("Move", throwIfNotFound: true);
        m_SinglePlayer_Interact = m_SinglePlayer.FindAction("Interact", throwIfNotFound: true);
        m_SinglePlayer_Pause = m_SinglePlayer.FindAction("Pause", throwIfNotFound: true);
        m_SinglePlayer_Hint = m_SinglePlayer.FindAction("Hint", throwIfNotFound: true);
        m_SinglePlayer_Previous = m_SinglePlayer.FindAction("Previous", throwIfNotFound: true);
        m_SinglePlayer_Next = m_SinglePlayer.FindAction("Next", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SinglePlayer
    private readonly InputActionMap m_SinglePlayer;
    private ISinglePlayerActions m_SinglePlayerActionsCallbackInterface;
    private readonly InputAction m_SinglePlayer_Move;
    private readonly InputAction m_SinglePlayer_Interact;
    private readonly InputAction m_SinglePlayer_Pause;
    private readonly InputAction m_SinglePlayer_Hint;
    private readonly InputAction m_SinglePlayer_Previous;
    private readonly InputAction m_SinglePlayer_Next;
    public struct SinglePlayerActions
    {
        private @InputActions m_Wrapper;
        public SinglePlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SinglePlayer_Move;
        public InputAction @Interact => m_Wrapper.m_SinglePlayer_Interact;
        public InputAction @Pause => m_Wrapper.m_SinglePlayer_Pause;
        public InputAction @Hint => m_Wrapper.m_SinglePlayer_Hint;
        public InputAction @Previous => m_Wrapper.m_SinglePlayer_Previous;
        public InputAction @Next => m_Wrapper.m_SinglePlayer_Next;
        public InputActionMap Get() { return m_Wrapper.m_SinglePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SinglePlayerActions set) { return set.Get(); }
        public void SetCallbacks(ISinglePlayerActions instance)
        {
            if (m_Wrapper.m_SinglePlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnInteract;
                @Pause.started -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnPause;
                @Hint.started -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnHint;
                @Hint.performed -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnHint;
                @Hint.canceled -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnHint;
                @Previous.started -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnPrevious;
                @Previous.performed -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnPrevious;
                @Previous.canceled -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnPrevious;
                @Next.started -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnNext;
                @Next.performed -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnNext;
                @Next.canceled -= m_Wrapper.m_SinglePlayerActionsCallbackInterface.OnNext;
            }
            m_Wrapper.m_SinglePlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Hint.started += instance.OnHint;
                @Hint.performed += instance.OnHint;
                @Hint.canceled += instance.OnHint;
                @Previous.started += instance.OnPrevious;
                @Previous.performed += instance.OnPrevious;
                @Previous.canceled += instance.OnPrevious;
                @Next.started += instance.OnNext;
                @Next.performed += instance.OnNext;
                @Next.canceled += instance.OnNext;
            }
        }
    }
    public SinglePlayerActions @SinglePlayer => new SinglePlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Click;
    public struct UIActions
    {
        private @InputActions m_Wrapper;
        public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface ISinglePlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnHint(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
